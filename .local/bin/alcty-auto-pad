#!/usr/bin/env bash

cur_desktop_id()
{
    readarray -t desktops < <(bspc query -D)

    idx=-1
    cur_desktop="$(bspc query -D -d focused)"
    for i in $(seq 0 "${#desktops[@]}"); do
	if [[ "${desktops[i]}" = "$cur_desktop" ]]; then
	    idx=$i
	    break;
	fi
    done

    echo "$idx"
}

check_node_count()
{
    desktop_id=$(cur_desktop_id)
    [[ "$desktop_id" -eq -1 ]] && echo "Invalid desktop ID" && exit 1

    local_windows=$(wmctrl -l | awk -v id="$desktop_id" '{ if ($2 == id) print }')
    [[ -z "$local_windows" || ! "$local_windows" =~ .+Alacritty ]] && return
    if [[ "$(echo "$local_windows" | wc -l)" -eq 1 ]]; then
	alcty-padding pad
    else
	alcty-padding unpad
    fi
}

main()
{
    layout=""
    prev_layout=""

    bspc subscribe desktop_focus desktop_layout | while read -r event; do
	event_type=$(echo "$event" | cut -d' ' -f1)
	case $event_type in
	    desktop_layout)
		layout=$(echo "$event" | awk '{print $NF}')
		;;
	    desktop_focus)
		layout=$(bspc query -d focused -T | jq -r '.layout')
		;;
	esac

	case "$layout" in
	    monocle)
		[[ $prev_layout != "monocle" ]] && alcty-padding pad
		;;
	    tiled)
		[[ $prev_layout != "tiled" ]] && check_node_count
		;;
	esac

	prev_layout=$layout
    done
}

command -v wmctrl jq > /dev/null || exit 1

main
